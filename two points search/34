//Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.
//Your algorithm's runtime complexity must be in the order of O(log n).
//If the target is not found in the array, return [-1, -1]
//这题就是正统的二分查找了，没什么难度
int* searchRange(int* nums, int numsSize, int target, int* returnSize) {
    int l=0;
    int r=numsSize-1;
    *returnSize=2;
    int* ret=(int*)malloc(sizeof(int)*2);
    while(target>=nums[0]&&l<=r&&target<=nums[numsSize-1]){
        int m=(r+l)/2;
        if(target==nums[m]){
            int p=0;
            int q=0;
            while(m+q<numsSize){
                if(nums[m+q]!=target){
                    break;
                }
                q++;
            }
            while(m-p>=0){
                if(nums[m-p]!=target){
                    break;
                }
                p++;
            }
            ret[0]=m-p+1;
            ret[1]=m+q-1;
            return ret;
        }
        if(target<nums[m]){
            r=m-1;
        }
        else{
            l=m+1;
        }
    }
    ret[0]=-1;
    ret[1]=-1;
    return ret;
}
