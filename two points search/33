//Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.
//(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).
//You are given a target value to search. If found in the array return its index, otherwise return -1.
//You may assume no duplicate exists in the array.
//Your algorithm's runtime complexity must be in the order of O(log n).
//可以直接当成排好序的数组，直接二分查找，只不过多分几种情况
int search(int* nums, int numsSize, int target) {
    int l=0;
    int r=numsSize-1;
    while(l<=r){
        int m=(l+r)/2;
        if(target==nums[m]){
            return m;
        }
        if(nums[l]<=nums[m]){
            if(nums[l]<=target&&target<nums[m]){
                r=m-1;
            }
            else{
                l=m+1;
            }
        }
        if(nums[m]<=nums[r]){
            if(nums[m]<target&&target<=nums[r]){
                l=m+1;
            }
            else{
                r=m-1;
            }
        }
    }
    return -1;
}
