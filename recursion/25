//Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.
//k is a positive integer and is less than or equal to the length of the linked list. If the number of
//nodes is not a multiple of k then left-out nodes in the end should remain as it is.
//以每个以k为长度的单元反转链表，再对整体进行递归操作，先完成后面的，再完成前面的。反转链表可以选择迭代或递归
struct ListNode* reverseKGroup(struct ListNode* head, int k) {
    if(k==1){
        return head;
    }
    int flag=1;
    struct ListNode* p=head;
    for(int i=0;i<k;i++){
        if(p==NULL){
            flag=0;
            break;
        }
        if(i<k-1){
            p=p->next;
        }
    }
    if(flag==0){
        return head;
    }
    struct ListNode* m=head;
    struct ListNode* n=m->next;
    head->next=reverseKGroup(p->next,k);
    while(n!=p){
        struct ListNode* temp=n;
        n=n->next;
        temp->next=m;
        m=temp;
    }
    n->next=m;
    return n;
}
